ACC.quote = {
    _autoload: [
        ["bindAddComment", $("#js-quote-comments").length !== 0],
        ["bindAddEntryComment", $(".js-quote-entry-comments").length !== 0],
        ["toggleMoreComments", $("#js-quote-comments").length !== 0],
        ["toggleLessComments", $("#js-quote-comments").length !== 0],
        ["displayLessComments", $("#js-quote-comments").length !== 0],
        ["quoteDetailsNavigation", $(".js-quote-actions").length !== 0],
        ["bindQuoteButtons", $(".js-btn-quote").length !== 0],
        ["bindEditQuoteButton", $(".js-quote-edit-btn").length !== 0],
        ["bindSubmitConfirmation", $(".js-quote-submit-btn").length !== 0],
        ["bindCancelConfirmation", $(".js-quote-cancel-btn").length !== 0],
        ["bindName", $("#js-quote-name").length !== 0],
        ["bindDescription", $("#js-quote-description").length !== 0],
        ["bindExpirationTime", $("#js-quote-expiration-time").length !== 0],
        ["bindCheckoutConfirmation", $(".js-quote-checkout-btn").length !== 0],
        ["bindEditConfirmation", $(".js-quote-warning-btn").length !== 0],
        ["bindQuoteDiscount", $(".js-quote-discount-link").length !== 0],
        ["bindNewCartClick", $(".new__cart--link").length !== 0]
    ],

    bindEditQuoteButton: function () {
        $(".js-quote-edit-btn").on("click", function () {
            window.location = $(this).data("quoteEditUrl");
        });
    },
    bindNewCartClick: function () {
        $(".new__cart--link").bind("click", function (event) {
            $(this).unbind(event);
        });
    },
    bindAddComment: function () {
        $(document).on(
            "keypress",
            '#js-quote-comments #comment',
            function (event) {
                const key = event.keyCode;
                const $comment = $('#comment');

                // If the user has pressed enter
                if (key === 13) {
                    if ($comment.val().trim() === '') {
                        return false;
                    }
                    event.preventDefault();
                    ACC.quote.quoteCommentSubmit($comment.val());
                    $comment.val("");
                    return false;
                } else {
                    return true;
                }
            });
    },

    bindAddEntryComment: function () {
        $(document).on(
            "keypress",
            ".js-quote-entry-comments",
            function (event) {
                const key = event.keyCode;

                if (key === 13) {
                    event.preventDefault();
                    ACC.quote.quoteEntryCommentSubmit($(this).val(), $(this).data("entry-number"));
                    return false;
                } else {
                    return true;
                }
            }
        );
    },

    bindQuoteButtons: function () {
        $('.js-save-quote-btn').click(function () {
            $('#quoteForm').attr('action', $(this).data("saveQuoteUrl")).submit();
        });
        $('.js-submit-quote-btn').click(function () {
            $('#quoteForm').attr('action', $(this).data("submitQuoteUrl")).submit();
        });
        $('.js-accept-quote-btn').click(function () {
            $('#quoteForm').attr('action', $(this).data("acceptQuoteUrl")).submit();
        });
    },

    quoteCommentSubmit: function (comment) {
        const quoteComments = $("#js-quote-comments");
        const addCommentUrl = quoteComments.data("quote-base-link") + "comment";
        const showAllComments = quoteComments.data("show-all-comments");

        $.ajax({
            url: addCommentUrl,
            data: {
                comment: comment
            },
            type: "post",
            success: function () {
                ACC.quote.onCommentSuccess(showAllComments);
            }
        });
    },

    quoteEntryCommentSubmit: function (comment, entryNumber) {
        if (!comment || !comment.length) {
            return;
        }

        const quoteComments = $("#js-quote-comments");
        const addEntryCommentUrl = quoteComments.data("quote-base-link") + "entry/comment";

        $.ajax({
            url: addEntryCommentUrl,
            data: {
                comment: comment,
                entryNumber: entryNumber
            },
            type: "post",
            success: function () {
                ACC.quote.onEntryCommentSuccess(entryNumber);
            }
        });
    },

    onCommentSuccess: function (showAllComments) {
        $("#commentListDiv").load(location.href + " #commentListDiv", function () {
            ACC.quote.displayComments("" + showAllComments);
        });
    },

    onEntryCommentSuccess: function (entryNumber) {
        const entryNumberHtml = ACC.common.encodeHtml(entryNumber);
        $("#entryCommentListDiv_" + entryNumberHtml).load(location.href + " #entryCommentListDiv_" + entryNumberHtml, function () {
            ACC.quote.displayEntryComments(entryNumberHtml);
        });

        $("#entryComment_" + entryNumberHtml).val("");
    },

    toggleMoreComments: function () {
        $(document).on('click', '#moreCommentsAnchor', ACC.quote.displayMoreComments);
        $(document).on('click', '.js-more-entry-comments-anchor', ACC.quote.displayMoreEntryComments);
    },

    toggleLessComments: function () {
        $(document).on('click', '#lessCommentsAnchor', ACC.quote.displayLessComments);
        $(document).on('click', '.js-less-entry-comments-anchor', ACC.quote.displayLessEntryComments);
    },

    displayMoreComments: function (e) {
        e.preventDefault();
        ACC.quote.displayComments("true");
    },

    displayMoreEntryComments: function (e) {
        e.preventDefault();
        ACC.quote.displayEntryComments($(this).data("entry-number"), "true");
    },

    displayLessComments: function (e) {
        if (e !== undefined) {
            e.preventDefault();
        }
        ACC.quote.displayComments("false");
    },

    displayLessEntryComments: function (e) {
        e.preventDefault();
        ACC.quote.displayEntryComments($(this).data("entry-number"), "false");
    },

    displayComments: function (showAll) {
        const quoteComments = $("#js-quote-comments");
        const currentCommentsShown = quoteComments.data("current-comments-shown");
        const comments = $('[id^="comment_"]');

        // iterate over comments. If showAll, just show, otherwise check if max comments is reached then hide
        for (let i = 0; i < comments.length; i++) {
            if (showAll === "true") {
                $(comments[i]).show();
            } else {
                if (i < currentCommentsShown) {
                    $(comments[i]).show();
                } else {
                    $(comments[i]).hide();
                }
            }
        }

        // toggle anchors
        const $moreCommentsAnchor = $('#moreCommentsAnchor');
        const $lessCommentsAnchor = $('#lessCommentsAnchor');
        if (showAll === "false") {
            $moreCommentsAnchor.show();
            $lessCommentsAnchor.hide();
            quoteComments.data("show-all-comments", false);
        } else {
            $moreCommentsAnchor.hide();
            $lessCommentsAnchor.show();
            quoteComments.data("show-all-comments", true);
        }

        return false;
    },

    displayEntryComments: function (entryNumber, showAll) {
        const entryNumberHtml = ACC.common.encodeHtml(entryNumber);
        const quoteEntryComments = $("#entryCommentListDiv_" + entryNumberHtml);
        const comments = quoteEntryComments.find('[id^="entryComment_' + entryNumberHtml + '"]');

        showAll = showAll || "" + quoteEntryComments.data("show-all-entry-comments");

        // iterate over comments. If showAll, just show, otherwise check if max comments is reached then hide
        for (let i = 0; i < comments.length; i++) {
            if (showAll === "true") {
                $(comments[i]).show();
            } else {
                if (i < 4) {
                    $(comments[i]).show();
                } else {
                    $(comments[i]).hide();
                }
            }
        }

        // toggle anchors
        if (showAll === "false") {
            quoteEntryComments.find(".js-more-entry-comments-anchor").show();
            quoteEntryComments.find(".js-less-entry-comments-anchor").hide();
            quoteEntryComments.data("show-all-entry-comments", false);
        } else {
            quoteEntryComments.find(".js-more-entry-comments-anchor").hide();
            quoteEntryComments.find(".js-less-entry-comments-anchor").show();
            quoteEntryComments.data("show-all-entry-comments", true);
        }

        return false;
    },

    quoteDetailsNavigation: function () {
        $('.js-quote-actions').on('click', function () {
            $(this).parent().find('nav').toggleClass('display-none');
        });
    },

    bindSubmitConfirmation: function () {
        ACC.quote.handleConfirmationModal({
            actionButtonSelector: ".js-quote-submit-btn",
            modalWindowSelector: "#js-quote-submit-modal",
            modalTitleDataAttributeName: "submit-confirmation-modal-title",
            cancelButtonSelector: "#js-quote-submit-modal #submitNoButton"
        });

        $("#quoteSubmitForm").submit(function (event) {
            const quoteForm = $("#quoteForm");

            if (quoteForm.is("form")) {
                event.preventDefault();
                quoteForm.prop("action", $(this).prop("action"));
                quoteForm.submit();
            }
        });
    },

    bindCheckoutConfirmation: function () {
        ACC.quote.handleConfirmationModal({
            actionButtonSelector: ".js-quote-checkout-btn",
            modalWindowSelector: "#js-quote-checkout-modal",
            modalTitleDataAttributeName: "submit-confirmation-modal-title",
            cancelButtonSelector: "#js-quote-checkout-modal #submitNoButton"
        });
    },

    bindCancelConfirmation: function () {
        ACC.quote.handleConfirmationModal({
            actionButtonSelector: ".js-quote-cancel-btn",
            modalWindowSelector: "#js-quote-cancel-modal",
            modalTitleDataAttributeName: "cancel-confirmation-modal-title",
            cancelButtonSelector: "#js-quote-cancel-modal #cancelNoButton"
        });
    },

    bindEditConfirmation: function () {
        ACC.quote.handleConfirmationModal({
            actionButtonSelector: ".js-quote-warning-btn",
            modalWindowSelector: "#js-quote-edit-modal",
            modalTitleDataAttributeName: "edit-confirmation-modal-title",
            cancelButtonSelector: "#js-quote-edit-modal #cancelEditNoButton",
            confirmButtonSelector: "#js-quote-edit-modal #cancelEditYesButton"
        });
    },

    handleConfirmationModal: function (options) {
        const $actionButtonSelector = $(document).find(options.actionButtonSelector);
        $actionButtonSelector.click(function (e) {
            e.preventDefault();

            const modalWindow = $(document).find(options.modalWindowSelector);
            const title = modalWindow.data(options.modalTitleDataAttributeName);

            if (options.initializeCallback) {
                options.initializeCallback();
            }

            ACC.colorbox.open(ACC.common.encodeHtml(title), {
                inline: true,
                href: modalWindow,
                width: "480px",
                escKey: false,
                overlayClose: false,
                onComplete: function () {
                    ACC.colorbox.resize();
                }
            });
        });

        const $cancelButtonSelector = $(document).find(options.cancelButtonSelector);
        $cancelButtonSelector.click(function (e) {
            e.preventDefault();
            ACC.colorbox.close();
        });

        const $confirmButtonSelector = $(document).find(options.confirmButtonSelector);
        $confirmButtonSelector.click(function (e) {
            e.preventDefault();
            ACC.colorbox.close();
            window.location = $actionButtonSelector.data("quoteEditUrl");
        });
    },

    bindQuoteDiscount: function () {
        ACC.quote.handleDiscountModal({
            actionButtonSelector: ".js-quote-discount-link",
            modalWindowSelector: "#js-quote-discount-modal",
            modalTitleDataAttributeName: "quote-modal-title",
            modalTotalDataAttributeName: "quote-modal-total",
            modalQuoteDiscountDataAttributeName: "quote-modal-quote-discount",
            modalCurrencyDataAttributeName: "quote-modal-currency",
            cancelButtonSelector: "#js-quote-discount-modal #cancelButton"
        });
    },

    handleDiscountModal: function (options) {
        const modalWindow = $(document).find(options.modalWindowSelector);
        const total = parseFloat(modalWindow.data(options.modalTotalDataAttributeName));
        const quoteDiscount = parseFloat(modalWindow.data(options.modalQuoteDiscountDataAttributeName));
        const currency = modalWindow.data(options.modalCurrencyDataAttributeName);

        $(document).find(options.actionButtonSelector).click(function (e) {
            e.preventDefault();

            const title = modalWindow.data(options.modalTitleDataAttributeName);

            if (options.initializeCallback) {
                options.initializeCallback();
            }

            ACC.colorbox.open(ACC.common.encodeHtml(title), {
                inline: true,
                href: modalWindow,
                width: "480px",
                onComplete: function () {
                    ACC.colorbox.resize();
                    const percent = (quoteDiscount / total) * 100;
                    const adjustTotal = (total - quoteDiscount).toFixed(2);
                    $("#js-quote-discount-by-percentage").val(percent.toFixed(2));
                    $("#js-quote-discount-by-amount").val(quoteDiscount.toFixed(2));
                    $("#js-quote-discount-adjust-total").val(adjustTotal);
                }
            });
        });

        $(document).find(options.cancelButtonSelector).click(function (e) {
            e.preventDefault();
            ACC.colorbox.close();
        });

        function enableSubmit() {
            $("#js-quote-discount-by-percentage").css('border-color', '#cccccc');
            $("#js-quote-discount-by-amount").css('border-color', '#cccccc');
            $("#js-quote-discount-adjust-total").css('border-color', '#cccccc');
            $("#submitButton").prop("disabled", false);
        }

        function resetIntial(val) {
            if (isNaN(parseFloat(val))) {
                val = 0.00;
                val = val.toFixed(2);
            }
            return val;
        }

        function updateByPercentage() {
            const $jsQuoteDiscountByPercentage = $("#js-quote-discount-by-percentage");
            const percent = parseFloat($jsQuoteDiscountByPercentage.val());
            // input validation
            if (percent > 100 || percent < 0) {
                $jsQuoteDiscountByPercentage.css('border-color', 'red');
                $("#submitButton").prop("disabled", true);
            } else {
                enableSubmit();
            }
            let discountAmount = total * percent / 100;
            discountAmount = discountAmount.toFixed(2);
            $("#js-quote-discount-by-amount").val(resetIntial(discountAmount));
            let remainTotal = total - discountAmount;
            remainTotal = remainTotal.toFixed(2);
            $("#js-quote-discount-adjust-total").val(resetIntial(remainTotal));
            $("#js-quote-discount-rate").val(resetIntial(percent));
            $("#js-quote-discount-type").val("PERCENT");

            updateNewTotal(remainTotal);
        }

        const $quoteDiscountByPercentage = $('#js-quote-discount-by-percentage');
        $quoteDiscountByPercentage.keyup(updateByPercentage);
        $quoteDiscountByPercentage.change(updateByPercentage);
        $quoteDiscountByPercentage.blur(reset);
        $quoteDiscountByPercentage.keypress(holdPreviousValue);

        function reset() {
            const $jsQuoteDiscountByPercentage = $('#js-quote-discount-by-percentage');
            const $jsQuoteDiscountByAmount = $('#js-quote-discount-by-amount');
            const $jsQuoteDiscountAdjustTotal = $('#js-quote-discount-adjust-total');
            const per = $jsQuoteDiscountByPercentage.val();
            const amt = $jsQuoteDiscountByAmount.val();
            const tot = $jsQuoteDiscountAdjustTotal.val();
            if (per === '') {
                $jsQuoteDiscountByPercentage.val('0.00');
            }
            if (amt === '') {
                $jsQuoteDiscountByAmount.val('0.00');
            }
            if (tot === '' || tot === 0.00) {
                $jsQuoteDiscountAdjustTotal.val(total);
            }
        }

        function holdPreviousValue(event) {
            const $this = $(this);
            if ((event.which !== 46 || $this.val().indexOf('.') !== -1)) {
                if (((event.which < 48 || event.which > 57) &&
                    (event.which !== 0 && event.which !== 8))) {
                    event.preventDefault();
                }
            }

            const text = $(this).val();
            if ((event.which === 46) && (text.indexOf('.') === -1)) {
                setTimeout(function () {
                    if ($this.val().substring($this.val().indexOf('.')).length > 3) {
                        $this.val($this.val().substring(0, $this.val().indexOf('.') + 3));
                    }
                }, 1);
            }

            if ((text.indexOf('.') !== -1)) {
                if ((text.substring(text.indexOf('.')).length > 2) &&
                    (event.which !== 0 && event.which !== 8) &&
                    ($(this)[0].selectionStart >= text.length - 2)) {
                    event.preventDefault();
                }
            }
        }

        function updateByAmount() {
            const $jsQuoteDiscountByAmount = $("#js-quote-discount-by-amount");
            const discountAmount = parseFloat($jsQuoteDiscountByAmount.val());

            // input validation
            if (discountAmount > total || discountAmount < 0) {
                $jsQuoteDiscountByAmount.css('border-color', 'red');
                $("#submitButton").prop("disabled", true);
            } else {
                enableSubmit();
            }

            let percent = (discountAmount / total) * 100;
            percent = percent.toFixed(2);
            $("#js-quote-discount-by-percentage").val(resetIntial(percent));
            let remainTotal = total - discountAmount;
            remainTotal = remainTotal.toFixed(2);
            $("#js-quote-discount-adjust-total").val(resetIntial(remainTotal));
            $("#js-quote-discount-rate").val(resetIntial(discountAmount));
            $("#js-quote-discount-type").val("ABSOLUTE");

            updateNewTotal(remainTotal);
        }

        const $quoteDiscountByAmount = $('#js-quote-discount-by-amount');
        $quoteDiscountByAmount.keyup(updateByAmount);
        $quoteDiscountByAmount.change(updateByAmount);
        $quoteDiscountByAmount.keypress(holdPreviousValue);
        $quoteDiscountByAmount.blur(reset);

        function updateByAdjustTotal() {
        	const $jsQuoteDiscountAdjustTotal = $("#js-quote-discount-adjust-total");
            const adujstTotal = parseFloat($jsQuoteDiscountAdjustTotal.val());

            // input validation
            if (adujstTotal > total || adujstTotal < 0) {
                $jsQuoteDiscountAdjustTotal.css('border-color', 'red');
                $("#submitButton").prop("disabled", true);
            } else {
                enableSubmit();
            }

            let discountAmount = total - adujstTotal;
            discountAmount = discountAmount.toFixed(2);
            $("#js-quote-discount-by-amount").val(resetIntial(discountAmount));
            let percent = (discountAmount / total) * 100;
            percent = percent.toFixed(2);
            $("#js-quote-discount-by-percentage").val(resetIntial(percent));
            $("#js-quote-discount-rate").val(resetIntial(adujstTotal));
            $("#js-quote-discount-type").val("TARGET");
            updateNewTotal(adujstTotal);
        }

        const $quoteDiscountAdjustTotal = $('#js-quote-discount-adjust-total');
        $quoteDiscountAdjustTotal.keyup(updateByAdjustTotal);
        $quoteDiscountAdjustTotal.change(updateByAdjustTotal);
        $quoteDiscountAdjustTotal.keypress(holdPreviousValue);
        $quoteDiscountAdjustTotal.blur(reset);

        function updateNewTotal(newTotal) {
            if (isNaN(parseFloat(newTotal))) {
                newTotal = total;
            }
            newTotal = parseFloat(newTotal).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'); // format num to money
            $("#js-quote-discount-new-total").text(currency.concat(newTotal));
        }
    },

    bindName: function () {
        $("#js-quote-name").on("focusout", function () {
            ACC.quote.updateMetadata();
        });
    },

    bindDescription: function () {
        $("#js-quote-description").on("focusout", function () {
            ACC.quote.updateMetadata();
        });
    },

    updateMetadata: function () {
        const quoteForm = $("#quoteFormDiv");
        const updateMetadataUrl = quoteForm.data("metadata-url");
        const name = $("#js-quote-name").val().trim();
        const description = $("#js-quote-description").val();
        const nameWrapperElement = $("#js-quote-name-wrapper");

        if (name && name.length) {
            nameWrapperElement.removeClass("has-error");

            $.ajax({
                url: updateMetadataUrl,
                data: {
                    name: name,
                    description: description
                },
                type: "POST",
                success: function () {
                    $(".js-modal-quote-description").text(description);
                    $(".js-modal-quote-name").text(name);
                }
            });
        } else {
            if (!nameWrapperElement.hasClass("has-error")) {
                nameWrapperElement.addClass("has-error");
            }
        }
    },

    bindExpirationTime: function () {
        const expirationTimeWrapperElement = $("#js-quote-expiration-time");
        const dateFormatForDatePicker = expirationTimeWrapperElement.data("date-format-for-date-picker");
        const minOfferValidityPeriodDays = expirationTimeWrapperElement.data("min-offer-validity-period-days");

        const minDate = new Date();
        minDate.setDate(minDate.getDate() + minOfferValidityPeriodDays);
        const $expirationTime = $("#expirationTime");

        $expirationTime.datepicker({
            dateFormat: dateFormatForDatePicker,
            constrainInput: true,
            minDate: minDate,
            onSelect: function () {
                ACC.quote.handleExpirationTimeUpdate(expirationTimeWrapperElement, dateFormatForDatePicker,
                    minOfferValidityPeriodDays);
            }
        });

        $expirationTime.change(function () {
            ACC.quote.handleExpirationTimeUpdate(expirationTimeWrapperElement, dateFormatForDatePicker,
                minOfferValidityPeriodDays);
        });

        $(document).on("click", ".js-open-datepicker-quote-expiration-time", function () {
            $expirationTime.datepicker('show');
        });
    },

    handleExpirationTimeUpdate: function (expirationTimeWrapperElement, dateFormat, minOfferValidityPeriodDays) {
        const expirationTimeElement = $("#expirationTime");
        const expirationTime = expirationTimeElement.val();

        if (ACC.quote.validateExpirationTime(dateFormat, expirationTime, minOfferValidityPeriodDays)) {
            ACC.quote.updateExpirationTime(expirationTime.trim());
            expirationTimeWrapperElement.removeClass("has-error");
        } else {
            if (!expirationTimeWrapperElement.hasClass("has-error")) {
                expirationTimeWrapperElement.addClass("has-error");
            }
        }
    },

    validateExpirationTime: function (dateFormat, value, minOfferValidityPeriodDays) {
        try {
            if (value) {
                const selectedDate = $.datepicker.parseDate(dateFormat, value);

                const validDate = new Date();
                validDate.setHours(0, 0, 0, 0);
                validDate.setDate(validDate.getDate() + minOfferValidityPeriodDays);

                return selectedDate >= validDate;
            } else {
                return true;
            }
        } catch (error) {
            return false;
        }
    },

    updateExpirationTime: function (expirationTime) {
        $.ajax({
            url: $("#js-quote-expiration-time").data("expiration-time-url"),
            type: 'POST',
            data: {expirationTime: expirationTime},
            error: function (jqXHR) {
                const expirationTimeWrapperElement = $("#js-quote-expiration-time");
                if (!expirationTimeWrapperElement.hasClass("has-error")) {
                    expirationTimeWrapperElement.addClass("has-error");
                }
            }
        });
    }
};

$(document).ready(function () {
    //toggles the whole quote block
    $('.js-quote-toggle-btn').click(function () {
        $(this).toggleClass('open');
        $("#quote__form--collapse").slideToggle(400);
        if ($(this).hasClass('open')) {
            $(this).addClass('collapsed');
        } else {
            $(this).removeClass('collapsed');
        }
    });

    //toggles only the comments
    $('.js-quote-comments-btn').click(function () {
        $(this).toggleClass('open');
        $("#comments__collapse").slideToggle(400);
        if ($(this).hasClass('open')) {
            $(this).addClass('collapsed');
        } else {
            $(this).removeClass('collapsed');
        }

    });
});
