ACC.validations = {

    validateEmail: function (email) {
        const re = new RegExp(/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/);
        return re.test(email);
    },

    validateMobileNumber: function (mobile) {
        return $.isNumeric(mobile) === true && (mobile.length === 9 || (mobile.length === 10 && mobile[0] === "0"));
    },

    validateForm: function (form) {
        const button = form.find("[id^=formButton]");
        form.valid() ? button.attr('disabled', false) : button.attr('disabled', true);
    },

    isAlphanumeric: function (text) {
        return /^[a-zA-Z0-9]+$/i.test(text);
    },

    lettersOnly: function (text) {
        return /^\D+$/i.test(text);
    },

    numbersOnly: function (text) {
        return /^[0-9]+$/.test(text);
    },

    isOlderEnough: function (date) {
        const currentDate = ACC.global.getCurrentDate();
        return (moment(currentDate).diff(moment(date, "DD/MM/YYYY"), 'years') >= 18);
    },

    isValidDate: function (date) {
        return /^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[012])\/(19|20)\d\d$/i.test(date);
    },

    luhnCheck: function (cardNumber, length) {
        if (cardNumber.toString().length !== length
            || cardNumber.toString().match(/\D/)) {
            return false;
        }

        let sum = 0;
        let alternate = false;
        for (let i = cardNumber.toString().length - 1; i >= 0; i--) {
            const charDigit = cardNumber.toString().charAt(i);
            let numberDigit = parseInt(charDigit, 10);

            if (alternate) {
                numberDigit *= 2;
                if (numberDigit > 9) {
                    numberDigit = (numberDigit % 10) + 1;
                }
            }

            sum += numberDigit;
            alternate = !alternate;
        }

        return (sum % 10 === 0);
    },

    isValidPassword: function (password) {
        return /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*?[#?!@$%^&*-])[A-Za-z0-9#?!@$%^&*-]{8,128}$/.test(password);
    },

}
