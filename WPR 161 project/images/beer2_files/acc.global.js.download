ACC.global = {

    _autoload: [
        "menuResponsive",
        ["passwordStrength", $('.password-strength').length > 0],
        "bindToggleOffcanvas",
        "numberInputForIOS",
        "bindToggleXsSearch",
        "bindHoverIntentMainNavigation",
        "initImager",
        "backToHome",
        "bindDropdown",
        "closeAccAlert",
        "storeCustomerLocation",
        ["jsMoveResponsive", $(".js-move-responsive").length > 0],
        ["jsCountdown", $(".js-countdown").length > 0],
        ["asmPlaceholderText", $("#customerName").length > 0],
        ["initTooltip", $("#shrProfileEditForm").length > 0],
        ["jsPrint", $(".js-print").length > 0],
        ["jsAccordionMobile", $(".js-accordion-mobile").length > 0],
        "hrHomePageWidth",
        "loadActionsForm",
        ["loadInputEffect", $(".form-section__input").length > 0],
        "afterLazyload",
        "bindReloadPageBtn",
        "bindDynamicCSSProperties",
        'bindGeolocationRefresh',
        ['bindCopyToClipboard', $('.js-clipboard').length],
    ],

    menuResponsive: function () {
        const $navigation = $(".navigation");
        const $navLinks = $navigation.find(".nav__links");
        const $itemsNavLinks = $navLinks.children();
        let templateItemsMore = '';

        for (let i = 3; i < $itemsNavLinks.length; i++) {
            const $item = $itemsNavLinks.eq(i);
            if (!$item.hasClass(".nav__links--primary-has__sub")) {
                $item.addClass("hidden-sm");
                let $a = $item.find("a");
                if ($a.length) {
                    let $subNavigationList = $item.find('.sub-navigation-list');
                    templateItemsMore += '<li class="nav__link--secondary title-nav';
                    if ($subNavigationList.length) {
                        templateItemsMore += ' sub-navigation-list--item-has__sub';
                    }
                    templateItemsMore += '">';
                    if ($subNavigationList.length) {
                        templateItemsMore += $subNavigationList[0].outerHTML;
                    }
                    templateItemsMore += $a[0].outerHTML + '</li>';
                }
            }
        }

        const templateMore = '<li class="auto nav__links--primary  nav__links--primary-has__sub js-enquire-has-sub nav-with-chevron world-of-checkers visible-sm">' +
            '    <span id="WorldOfCheckersNavNodeEntry" class="yCmsComponent nav__link js_nav__link">' +
            '        <a href="javascript:void(0);" title="' + loc("text.more") + '">' + loc("text.more") + '</a>' +
            '    </span>' +
            '    <span class="nav__link--drill__down js_nav__link--drill__down shoprite-icon-dropdown-expand"></span>' +
            '    <div class="sub__navigation js_sub__navigation col-md-3 col-lg-2">' +
            '        <div class="row">' +
            '            <div class="js-subnav-border subnav-border"></div>' +
            '            <div class="sub-navigation-section col-md-12">' +
            '                <ul class="sub-navigation-list ">' +
            templateItemsMore +
            '                </ul>' +
            '            </div>' +
            '        </div>' +
            '    </div>' +
            '</li>';

        $navLinks.eq(0).append(templateMore);
    },

    passwordStrength: function () {
        $('.password-strength').pstrength({
            verdicts: [ACC.pwdStrengthTooShortPwd,
                ACC.pwdStrengthVeryWeak,
                ACC.pwdStrengthWeak,
                ACC.pwdStrengthMedium,
                ACC.pwdStrengthStrong,
                ACC.pwdStrengthVeryStrong],
            minCharText: ACC.pwdStrengthMinCharText
        });
    },

    storeCustomerLocation: function () {
        const $defaultStoreSelected = $(".js-default-store-selected");
        if (navigator.geolocation
            && !ACC.global.isGeolocationPermissionDenied()
            && $defaultStoreSelected.data("defaultStoreSelectedWithoutGeoInfo")
            && $defaultStoreSelected.data("selectedStoreClosed") !== true) {
            navigator.geolocation.getCurrentPosition(function (position) {
                    $.ajax({
                        url: ACC.config.encodedContextPath + '/setCustomerLocation',
                        data: {
                            "latitude": position.coords.latitude,
                            "longitude": position.coords.longitude
                        },
                        type: "get",
                        success: function () {
                            ACC.global.setStoredGeolocation(position)
                            location.reload();
                        }
                    });
                },
                function (error) {
                    if (error.code === error.PERMISSION_DENIED) {
                        ACC.global.storeGeolocationPermissionDenied(true)
                    }
                }
            );
        }
    },

    bindToggleOffcanvas: function () {
        $(document).on("click", ".js-toggle-sm-navigation", function () {
            ACC.global.toggleClassState($("main"), "offcanvas");
            ACC.global.toggleClassState($("html"), "offcanvas");
            ACC.global.toggleClassState($("body"), "offcanvas");
            ACC.global.resetXsSearch();

            if ($('.sub-navigation-overlay').length > 0) {
                $('div').remove(".sub-navigation-overlay");
                $('body').removeClass("prevent-elastic");
            } else {
                $('footer').append('<div class="sub-navigation-overlay"></div>');
                $('body').addClass("prevent-elastic");
            }

        });
    },

    initTooltip: function () {
        $('[data-toggle="popover"]').popover();
    },

    bindToggleXsSearch: function () {
        $(document).on("click", ".js-toggle-xs-search", function () {
            ACC.global.toggleClassState($(".site-search"), "active");
            ACC.global.toggleClassState($(".js-mainHeader .navigation--middle"), "search-open");
        });
    },

    resetXsSearch: function () {
        $('.site-search').removeClass('active');
        $(".js-mainHeader .navigation--middle").removeClass("search-open");
    },

    toggleClassState: function ($e, c) {
        $e.hasClass(c) ? $e.removeClass(c) : $e.addClass(c);
        return $e.hasClass(c);
    },

    bindHoverIntentMainNavigation: function () {
        enquire.register("screen and (min-width:" + ACC.common.encodeHtml(screenSmMin) + ")", {
            match: function () {
                // on screens larger or equal screenMdMin (1024px) calculate position for .sub-navigation
                $(".js-enquire-has-sub").hoverIntent(function () {
                    const $this = $(this);
                    const itemWidth = $this.width();
                    const $subNav = $this.find('.js_sub__navigation');
                    const subNavWidth = $subNav.outerWidth();
                    const $mainNav = $('.js_navigation--bottom');
                    const mainNavWidth = $mainNav.width();
                    const _asmHeight = $("#_asm").height() || 0;
                    const topHeaderHight = $(".header__top").height();
                    const botomHeaderHight = $(".header__bottom").height();

                    // get the left position for sub-navigation to be centered under each <li>
                    const leftPos = $this.position().left + itemWidth / 2 - subNavWidth / 2;
                    // get the top position for sub-navigation. this is usually the height of the <li> unless there is more than one row of <li>
                    const topPos = $this.position().top + $this.height();

                    if (leftPos > 0 && leftPos + subNavWidth < mainNavWidth) {
                        // .sub-navigation is within bounds of the .main-navigation
                        $subNav.css({
                            "left": "auto",//leftPos,
                            "top": topPos,
                            "right": "auto"
                        });
                    } else if (leftPos < 0) {
                        // .suv-navigation can't be centered under the <li> because it would exceed the .main-navigation on the left side
                        $subNav.css({
                            "left": 0,
                            "top": topPos,
                            "right": "auto"
                        });
                    } else if (leftPos + subNavWidth > mainNavWidth) {
                        // .suv-navigation can't be centered under the <li> because it would exceed the .main-navigation on the right side
                        $subNav.css({
                            "right": "auto",// 0,
                            "top": topPos,
                            "left": "auto"
                        });
                    }
                    $this.addClass("show-sub");
                    $('footer').append('<div class="sub-navigation-overlay"></div>');
                    //var overlayTop = $(".sub-navigation-overlay").position().top
                    // $(".sub-navigation-overlay").css('top',overlayTop + _asmHeight + 4);
                    $(".sub-navigation-overlay").css('top', botomHeaderHight + topHeaderHight + _asmHeight + 11);

                }, function () {
                    const $body = $('body');
                    $(this).removeClass("show-sub");
                    $body.removeClass('prevent-scroll');
                    $body.css("margin-left", "auto");
                    $('.sticky').css("padding-right", "0");
                    $('.js-owl-masthead').css("margin-left", "auto");
                    $('div').remove(".sub-navigation-overlay");
                    $("li.nav__link--secondary").removeClass("selected");
                });
            },

            unmatch: function () {
                // on screens smaller than screenMdMin (1024px) remove inline styles from .sub-navigation and remove hoverIntent
                $(".js_sub__navigation").removeAttr("style");
                $(".js-enquire-has-sub").hoverIntent(function () {
                    // unbinding hover
                });
            }

        });
    },

    initImager: function (elems) {
        elems = elems || '.js-responsive-image';
        this.imgr = new Imager(elems);
    },

    reprocessImages: function (elems) {
        elems = elems || '.js-responsive-image';
        if (this.imgr === undefined) {
            this.initImager(elems);
        } else {
            this.imgr.checkImagesNeedReplacing($(elems));
        }
    },

    // usage: ACC.global.addGoogleMapsApi("callback function"); // callback function name like "ACC.global.myfunction"
    addGoogleMapsApi: function (callback) {
        if (callback !== undefined && $(".js-googleMapsApi").length === 0) {
            const googleApiSrc = "//maps.googleapis.com/maps/api/js?key=" + ACC.common.encodeHtml(ACC.config.googleApiKey) + '&sensor=false&callback=' + ACC.common.encodeHtml(callback);
            $('head').append($("<script>").addClass("js-googleMapsApi")
                .attr("type", "text/javascript")
                .attr("src", googleApiSrc));
        } else if (callback !== undefined) {
            eval(callback + "()"); //NOSONAR
        }
    },

    backToHome: function () {
        $(".backToHome").on("click", function () {
            window.location = ACC.config.contextPath;
        });
    },

    bindDropdown: function () {
        $(document).on("click", ".dropdown-toggle", dropdownToggle);
    },

    closeAccAlert: function () {
        $(".closeAccAlert").on("click", function () {
            $(this).parent('.getAccAlert').remove();
        });
    },

    isNumberKey: function (evt) {
        $(evt.target).bind('input', function () {
            this.value = this.value.replace(/[^\d]/g, '');
        });
    },

    jsMoveResponsive: function () {
        $.each($(".js-move-responsive"), function (index, element) {
            const content = $(element).children();
            const moveTo = $($(element).data("moveto"));

            enquire.register("screen and (max-width:" + ACC.common.encodeHtml(screenXsMax) + ")", {
                match: function () {
                    content.appendTo(moveTo);
                },

                unmatch: function () {
                    content.appendTo($(element));
                }
            });
        });
    },

    jsCountdown: function () {
        const countDownField = $(".js-countdown");

        if (countDownField) {
            let value = countDownField.data("value");
            const text = countDownField.data("text");
            const goto = countDownField.data("goto") !== undefined ? countDownField.data("goto") : "/";
            let time = 0;
            let newtext = "";

            if (text === "second") {
                time = 1000;
            }

            const intervalCountDown = setInterval(function () {
                value--;
                if (value > 1) {
                    newtext = text + "s";
                } else {
                    newtext = text;

                    if (value === 0) {
                        clearInterval(intervalCountDown);
                        window.location.href = goto;
                    }
                }
                countDownField.html(value + " " + newtext);
            }, time);
        }
    },

    asmPlaceholderText: function () {
        $("#customerName + input").attr("placeholder", loc("asm.placeholder.text"));
    },

    jsPrint: function () {
        $(".js-print").on("click", function (e) {
            const $body = $("body");
            const bodyPadding = $body.css('padding-top');
            $body.css('padding-top', "0");
            e.preventDefault();
            window.print();
            $body.css('padding-top', bodyPadding);
        });
    },

    jsAccordionMobile: function () {
        $.each($(".js-accordion-mobile"), function (index, element) {
            const accordion = $(element);
            const title = accordion.find(".js-accordion-mobile__title");
            const content = accordion.find(".js-accordion-mobile__content");
            const dataWidthMax = accordion.data("maxWidth");
            const breakPoint = isNaN(dataWidthMax) ? ACC.common.encodeHtml(window["screen" + dataWidthMax.charAt().toUpperCase() + dataWidthMax.slice(1)]) : dataWidthMax + "px";

            enquire.register("screen and (max-width:" + breakPoint + ")", {
                match: function () {
                    accordion.addClass("is-active is-show");
                    title.on("click", function () {
                        if (content.is(":hidden")) {
                            accordion.addClass("is-show")
                        } else {
                            accordion.removeClass("is-show")
                        }
                        content.stop().slideToggle();
                    });
                },
                unmatch: function () {
                    accordion.removeClass("is-active");
                    content.show();
                    title.off("click");
                }
            });
        });
    },

    gaEvent: function (category, action, label) {
        dataLayer.push({
            "event": "gaEvent",
            "eventCategory": category,
            "eventAction": action,
            "eventLabel": label
        });
    },

    onPromoClick: function (promoObj) {
        dataLayer.push({
            "event": "promotionClick",
            "ecommerce": {
                "promoClick": {
                    "promotions": [
                        {
                            "id": promoObj.id,
                            "name": promoObj.name,
                            "creative": promoObj.creative,
                            "position": promoObj.pos
                        }
                    ]
                }
            },
            "eventCallback": function () {
                document.location = promoObj.destinationUrl;
            }
        });
    },

    numberInputForIOS: function () {
        if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {
            const inputs = document.querySelectorAll('input[type="number"]');
            for (var i = inputs.length; i--;)
                inputs[i].setAttribute('pattern', '\\d*');
        }
    },

    "hrHomePageWidth": function () {
        const ua = navigator.userAgent.toLowerCase();
        if (ua.indexOf('safari') > -1) {
            $(".hr-strong").css("width", window.innerWidth);
        }
    },

    getCurrentDate: function () {
        const currentDateElement = $(".js-today-date");
        if (currentDateElement.length > 0) {
            const todayDateString = currentDateElement.data("todayDate");
            const dateParts = todayDateString.split("-");
            const year = dateParts[0];
            const month = dateParts[1] - 1;
            const day = dateParts[2];
            return new Date(year, month, day);
        } else {
            return new Date();
        }
    },

    loadActionsForm: function () {
        const jsActionInfo = $(".js-action-info");
        $.each(jsActionInfo, function (index, value) {
            const info = $(value);
            const infoMessage = info.find(".form-section__actions__info__message");
            const infoInput = info.closest(".form-section__actions").find("input");
            const buttons = info.closest(".form-section__actions__buttons");
            infoInput.css("padding-right", (buttons.outerWidth() + parseInt(buttons.css("right")) * 2) + "px");

            info.hover(
                function () {
                    infoMessage.stop(true).fadeIn();
                    const infoMessageHeight = infoMessage.outerHeight();
                    infoMessage.css("top", "-" + (infoMessageHeight + 10) + "px");
                }, function () {
                    infoMessage.stop(true).fadeOut();
                }
            );
        });

        const jsActionsClear = $(".js-action-clear");
        $.each(jsActionsClear, function (index, value) {
            const $clearButton = $(value);
            const $input = $clearButton.closest(".form-section__actions").find("input");

            $input.on("keyup", function () {
                if ($input.val() !== "") {
                    $clearButton.show();
                } else {
                    $clearButton.hide();
                }
            });

            $clearButton.on("click", function () {
                $input.val("").focus();
                $clearButton.hide();
            });
        });

        const $jsActionsPassword = $(".js-action-password");
        $.each($jsActionsPassword, function (index, value) {
            const $password = $(value);
            const $passwordActions = $password.closest(".form-section__actions");
            const $passwordInput = $passwordActions.find("input");
            const $iconPassword = $password.find("i");
            let isShow = false;

            $passwordInput.on("input", function () {
                if ($(this).val().trim() !== '') {
                    $passwordActions.addClass("show-password-button");

                    if ($(this).valid()) $passwordActions.addClass("is-password-valid");
                    else $passwordActions.removeClass("is-password-valid");
                } else {
                    $passwordActions.removeClass("show-password-button");
                }
            });

            $password.on("click", function () {
                if (isShow) {
                    $passwordInput.attr("type", "password");
                    $iconPassword.attr("class", "shoprite-icon-text-reveal-solid");
                    isShow = false;
                } else {
                    $passwordInput.attr("type", "text");
                    $iconPassword.attr("class", "shoprite-icon-text-hide-solid");
                    isShow = true;
                }
            });
        });
    },

    loadInputEffect: function () {
        const inputs = $(".form-section__input");
        inputs.blur(function () {
            if ($(this).val()) {
                $(this).addClass('used');
            } else {
                $(this).removeClass('used');
            }
        });

        $.each(inputs, function (index, element) {
            const input = $(element);
            if (input.val()) {
                input.addClass("used");
            } else {
                input.removeClass("used")
            }
        })
    },

    afterLazyload: function () {
        $(document).on('lazyloaded', function (e) {
            $(".carousel__component-product-grid .low-quality-img").hide();
        });
    },

    reloadPage: function () {
        window.location.reload();
    },

    bindReloadPageBtn: function () {
        $(document).on('click', '.js-reload-page-btn', function () {
            ACC.global.reloadPage();
        })
    },

    bindDynamicCSSProperties: function () {
        function updateDynamicCSSProperties() {
            const diffWidths = window.outerWidth - document.body.clientWidth;
            document.documentElement.style.setProperty('--bodyWidth', document.body.clientWidth + 'px');
            document.documentElement.style.setProperty('--wrapWidth', (diffWidths === 0 ? 1410 : 1410 + diffWidths) + 'px');
            document.documentElement.style.setProperty('--headerBottomMobHeight', $('.header-bottom-mob').outerHeight() + 'px');
        }

        updateDynamicCSSProperties();
        $(window).resize(function () {
            updateDynamicCSSProperties();
        });
    },

    showLoadingBackground: function () {
        $(".loading-background").show();
    },

    showLoadingBackgroundMenu: function () {
        const $profileMenu = $(".profile__menu");
        if ($profileMenu.length) {
            $profileMenu.find(".loading-background").show();
        } else {
            $(".loading-background").show();
        }
    },

    isElementOnScreen: function ($elem) {
        if (!$elem.length) {
            return false;
        }
        const $window = $(window),
            viewport_top = $window.scrollTop(),
            viewport_height = $window.height(),
            viewport_bottom = viewport_top + viewport_height,
            top = $elem.offset().top,
            height = $elem.height(),
            bottom = top + height;
        return (top >= viewport_top && top < viewport_bottom) ||
            (bottom > viewport_top && bottom <= viewport_bottom) ||
            (height > viewport_height && top <= viewport_top && bottom >= viewport_bottom);
    },

    loadRecaptchas: function () {
        if (typeof grecaptcha != "undefined") {
            const recaptchas = $(".js-g-recaptcha");
            recaptchas.each(function (index, recaptcha) {
                if ($(recaptcha).children().length === 0) {
                    let widgetId = grecaptcha.render(recaptcha, {
                        'sitekey': ACC.config.recaptchaKey,
                        'size': 'invisible',
                        'callback': function (token) {
                            const recaptchaForm = $(recaptcha).closest(".js-g-recaptcha-form");
                            recaptchaForm.addClass("js-g-recaptcha-validated");
                            recaptchaForm.append('<input type="hidden" name="recaptchaToken" value="' + token + '" />');
                            recaptchaForm.submit();
                        },
                        'error-callback': function () {
                            console.error("Re-captcha is not properly configured. Skipping validation.");
                            $(recaptcha).closest(".js-g-recaptcha-form").addClass("js-g-recaptcha-validated");
                        },
                        'expired-callback': function () {
                            grecaptcha.reset();
                        }
                    });
                    $(recaptcha).attr("data-widget-id", widgetId);
                }
            });
        }
    },

    runRecaptcha: function (form) {
        if (typeof grecaptcha != "undefined" && form.hasClass("js-g-recaptcha-form") && !form.hasClass("js-g-recaptcha-validated")) {
            grecaptcha.execute(form.find(".js-g-recaptcha").data("widget-id"));
            return false;
        }
        return true;
    },

    getURlQueryParams: function () {
        const vars = [];
        let hash;
        const hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (let i = 0; i < hashes.length; i++) {
            hash = hashes[i].split('=');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        return vars;
    },

    removeURLParameters: function (url, parameters) {
        const urlParts = url.split('?');
        if (urlParts.length >= 2 && parameters.length > 0) {
            const queryParams = urlParts[1].split(/[&;]/g);
            for (let i = 0; i < parameters.length; i++) {
                const parameterPrefix = encodeURIComponent(parameters[i]) + '=';
                for (let j = queryParams.length; j-- > 0;) {
                    if (queryParams[j].lastIndexOf(parameterPrefix, 0) !== -1) {
                        queryParams.splice(j, 1);
                    }
                }
            }
            return urlParts[0] + (queryParams.length > 0 ? '?' + queryParams.join('&') : '');
        }
        return url;
    },

    bindGeolocationRefresh: function () {
        if ((window.performance.navigation
                && window.performance.navigation.type === 1)
            || window.performance.getEntriesByType('navigation')
                .map((nav) => nav.type)
                .includes('reload')
        ) {
            sessionStorage.removeItem('geolocationPermissionDenied')
        }
    },

    isGeolocationPermissionDenied: function () {
        return JSON.parse(sessionStorage.getItem('geolocationPermissionDenied'))
    },

    storeGeolocationPermissionDenied: function (denied) {
        sessionStorage.setItem('geolocationPermissionDenied', JSON.stringify(denied))
    },

    getStoredGeolocation: function () {
        return Cookies.get('geolocation')
            ? JSON.parse(Cookies.get('geolocation'))
            : null
    },

    setStoredGeolocation: function (position) {
        if (position && position.coords && position.coords.longitude && position.coords.latitude) {
            Cookies.set('geolocation', JSON.stringify({
                latitude: position.coords.latitude,
                longitude: position.coords.longitude,
                accuracy: position.coords.accuracy
            }))
        }
    },

    bindCopyToClipboard: function () {
        $('.js-clipboard').click(function () {
            const id = $(this).attr('id')
            const text = $(`#${id}-target`).text()
            navigator.clipboard.writeText(text)
        })
    },

    /**
     * This function will take a serialized form data and will create a complex JSON.
     * Note that this method will only work for complex forms that have only one level of depth.
     *
     * @param formData The form data to convert
     * @returns {{}} a JSON object representing the form data
     */
    convertFormToJSON: function (formData) {
        const object = {};
        $.each(formData, function () {
            if (object.hasOwnProperty(this.name)) {
                if (!Array.isArray(object[this.name])) {
                    object[this.name] = [object[this.name]];
                }
                object[this.name].push(this.value || "");
            } else if (ACC.global.isNestedObjectKey(this.name)) {
                const split = this.name.split(".");
                const nestedObjectKey = split[0];
                const nestedObjectAttrKey = split[1];

                if (object.hasOwnProperty(nestedObjectKey)) {
                    if (object[nestedObjectKey].hasOwnProperty(nestedObjectAttrKey)) {
                        if (!Array.isArray(object[nestedObjectKey][nestedObjectAttrKey])) {
                            object[nestedObjectKey][nestedObjectAttrKey] = [object[nestedObjectKey][nestedObjectAttrKey]];
                        }
                        object[nestedObjectKey][nestedObjectAttrKey].push(this.value || "");
                    } else {
                        object[nestedObjectKey][nestedObjectAttrKey] = this.value || "";
                    }
                } else {
                    object[nestedObjectKey] = {};
                    object[nestedObjectKey][nestedObjectAttrKey] = this.value || "";
                }
            } else {
                object[this.name] = this.value || "";
            }
        });
        return object;
    },

    isNestedObjectKey: function (key) {
        return key.includes(".");
    }
};

// ***** Dropdown begins *****
function dropdownParent($this) {
    let selector = $this.attr('href');
    selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ''); // strip for ie7
    const $parent = selector && $(selector);
    return $parent && $parent.length ? $parent : $this.parent()
}

function dropdownClearMenus(e) {
    // if right click, exit
    if (e && e.which === 3) return;

    // remove class added on dropdownToggle
    $('.dropdown-backdrop').remove();

    $(".dropdown-toggle").each(function () {
        const $parent = dropdownParent($(this));
        if (!$parent.hasClass('open')) return;
        if (e && e.type === 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return;
        $parent.removeClass('open')
    })
}

function dropdownToggle(e) {
    const $this = $(this);
    if ($this.is('.disabled, :disabled')) return;
    const $parent = dropdownParent($this);
    const isActive = $parent.hasClass('open');
    dropdownClearMenus();

    if (!isActive) {
        if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
            // if mobile we use a backdrop because click events don't delegate
            $(document.createElement('div'))
                .addClass('dropdown-backdrop')
                .insertAfter($(this))
                .on('click', dropdownClearMenus)
        }

        if (e.isDefaultPrevented()) return;

        // expand the <ul> on the dropdown
        $this
            .trigger('focus')
            .attr('aria-expanded', 'true');

        // set parent to open
        $parent.toggleClass('open');
    }

    return false
}

//***** Dropdown ends *****
