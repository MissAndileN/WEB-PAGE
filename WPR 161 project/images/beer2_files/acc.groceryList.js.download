ACC.groceryList = {
    _autoload: [
        ["bindAddProductUnit", $(".js-add-product-unit").length],
        ["bindSubtractProductUnit", $(".js-subtract-product-unit").length],
        ["bindRemoveProduct", $(".js-remove-selected-items-grocery-list").length],
        ['bindLoadGroceryListDetail', $('.js-grocery-list-detail').length],
        ['bindCreateWishlistButton', $('.js-wishlist-create-button').length],
        ["bannersCarousel", $(".squared-multi-banner--carousel").length],
        ["fullyHideHeader", $(".js-grocery-list-hidden-header").length],
        ["downloadBabyGroceryList", $(".js-download-grocery-list").length],
        ["bindShareMyWishlist", $(".share-my-wishlist").length],
    ],

    selectItem: function (element) {
        const $this = $(element);
        const $removeBtn = $this.closest(".js-items-section").find(".js-remove-selected-items-grocery-list");
        const $items = $this.closest(".js-items-section").find(".js-item-check");

        const selectedItemCount = ACC.wishlistLittleMe.getSelectedItems($items).length;
        const itemsCount = $items.length;

        ACC.wishlistLittleMe.refreshRemoveButton($removeBtn, selectedItemCount <= 0, selectedItemCount);
        ACC.wishlistLittleMe.setSelectBtnMode(selectedItemCount, itemsCount);
    },

    bindAddProductUnit: function () {
        $(".js-add-product-unit").click(ACC.groceryList.addProductUnit);
    },

    addProductUnit: function () {
        const $this = $(this)
        const $productContainer = $this.closest('.js-item')
        const $inverseOperationButton = $productContainer.find('.js-subtract-product-unit')
        const productCode = $this.data("itemCode")

        $this.off('click')
        $inverseOperationButton.off('click')

        $.post({
            url: 'my-grocery-list/addProductUnit?productCode=' + productCode,
            success: function () {
                const $productQuantityElement = $this.closest(".js-item").find(".js-item-quantity");
                const numUnitsOfProducts = parseInt($productQuantityElement.text());
                $productQuantityElement.text(numUnitsOfProducts + 1);

                if (numUnitsOfProducts >= 1) {
                    $this.parent().find(".button--remove").removeClass("button--remove")
                }
            },
            error: function (data) {
                console.log("Error adding product unit");
                console.log(data);
            },
            complete: function () {
                $this.click(ACC.groceryList.addProductUnit)
                $inverseOperationButton.click(ACC.groceryList.subtractProductUnit)
                ACC.groceryList.updateTotalPrice($this);
                ACC.groceryList.updateTotalDiscount($this);
            }
        });
    },

    bindSubtractProductUnit: function () {
        $(".js-subtract-product-unit").click(ACC.groceryList.subtractProductUnit)
    },

    subtractProductUnit: function () {
        const $this = $(this)
        const $productContainer = $this.closest('.js-item')
        const $inverseOperationButton = $productContainer.find('.js-add-product-unit')
        const productCode = $this.data("itemCode")

        $this.off('click')
        $inverseOperationButton.off('click')

        $.post({
            url: 'my-grocery-list/subtractProductUnit?productCode=' + productCode,
            success: function () {
                const $productQuantityElement = $productContainer.find(".js-item-quantity");
                const numUnitsOfProducts = parseInt($productQuantityElement.text());

                if (numUnitsOfProducts <= 1) {
                    ACC.wishlistLittleMe.removeItem($this, false);
                } else {
                    $productQuantityElement.text(numUnitsOfProducts - 1);
                }

                if (numUnitsOfProducts == 2) {
                    $this.addClass("button--remove")
                }
            },
            error: function (data) {
                console.log("Error adding product unit");
                console.log(data);
            },
            complete: function () {
                $this.click(ACC.groceryList.subtractProductUnit)
                $inverseOperationButton.click(ACC.groceryList.addProductUnit)
                ACC.groceryList.updateTotalPrice($this);
                ACC.groceryList.updateTotalDiscount($this);
            }
        });
    },

    bindRemoveProduct: function () {
        $(".js-remove-selected-items-grocery-list").click(function () {
            const $this = $(this);

            const $items = $this.closest(".js-items-section").find(".js-item-check");

            const $selectedItems = ACC.wishlistLittleMe.getSelectedItems($items);
            const productCodes = ACC.wishlistLittleMe.mapItemsToProductCodes($selectedItems);
            const selectedItemCount = $selectedItems.length;

            if (selectedItemCount > 0) {
                $.post({
                    url: 'my-grocery-list/removeProducts?productCodes=' + productCodes,
                    success: function () {
                        const $removeBtn = $this.closest(".js-items-section").find(".js-remove-selected-items-grocery-list");
                        const itemsCount = $items.length;
                        $selectedItems.forEach(function ($item) {
                            ACC.wishlistLittleMe.removeItem($item, false);
                            ACC.groceryList.updateTotalPrice($item);
                            ACC.groceryList.updateTotalDiscount($item);
                        });
                    },
                    error: function (data) {
                        console.log("Error removing product");
                        console.log(data);
                    },
                    complete: function() {
                        $(".js-remove-selected-items-wishlist-count").text("");
                        $(".js-remove-selected-items-grocery-list").removeClass("selected");
                    }
                });
            }
        });
    },

    refreshBindAddProductToGroceryList: function () {
        const actions = $(".js-grocery-list-add-action");
        actions.off('click');
        actions.click(ACC.groceryList.addProductToGroceryList);
    },

    handleProductResponse: function (result, $item) {
        if (result["success"]) {
            if (result["operation"] === 'OPERATION_ADD_PRODUCT') {
                $item.data("productExistsInGroceryList", true);
                ACC.groceryList.changeProductIcon($item, true);
                ACC.wishlistLittleMe.showLittleMePopUpAfterAddProduct();
            } else if (result["operation"] === 'OPERATION_REMOVE_PRODUCT') {
                $item.data("productExistsInGroceryList", false);
                ACC.groceryList.changeProductIcon($item, false);
                ACC.wishlistLittleMe.showLittleMePopUpAfterRemoveProduct();
            } else {
                console.log("No product could be managed.");
            }
        } else {
            console.log("Unexpected error.");
            console.log(result["message"]);
        }
    },

    changeProductIcon: function ($item, productExistsInGroceryList) {
        const $itemIcon = $item.find(".icon");
        const $itemButton = $item.find(".add-grocery-list-container__button");
        if (productExistsInGroceryList) {
            $itemButton.addClass("is-active");
            $itemIcon.removeClass("shoprite-icon-grocery-list").addClass("shoprite-icon-grocery-list-added");
        } else {
            const $itemIcon = $item.find(".icon");
            $itemButton.removeClass("is-active");
            $itemIcon.removeClass("shoprite-icon-grocery-list-added").addClass("shoprite-icon-grocery-list");
        }
    },

    bindLoadGroceryListDetail: function () {
        const container = $('.js-grocery-list-detail')
        const url = container.data('grocerylistUrl')
        $.ajax({
            type: 'GET',
            url,
            success: function (data) {
                ACC.groceryList.populateContainer(container, data)
            }
        })
    },

    populateContainer: function (container, data) {
        container.empty()
        container.append(data)
        ACC.groceryList.bindAddProductUnit()
        ACC.groceryList.bindSubtractProductUnit()
        ACC.groceryList.movePricePosition(container);
    },

    movePricePosition: function (container) {
        const $items = container.find(".js-item");
        $.each($items, function (index, element) {
            $(element).find(".grid-price").appendTo($(element).find(".product__buttons__price"));
            $(element).find(".grid-price").removeAttr("data-html2canvas-ignore");
        });
    },

    updateTotalPrice: function (container) {
        const itemUnitPrice = parseFloat(container.closest(".js-item").data('itemUnitPrice'));
        const currentTotal = $(".grocery-list-total__value").text().replace(",", "");
        const currentTotalValue = parseFloat(currentTotal.slice(1, currentTotal.length));
        $(".grocery-list-total__value").text("R" + ACC.groceryList.getNewTotal(container, currentTotalValue, itemUnitPrice));
    },

    updateTotalDiscount: function (container) {
        const itemUnitDiscount = parseFloat(container.closest(".js-item").data('itemUnitDiscount'));
        const currentTotalDiscount = $(".grocery-list-total__discount-value").text();
        const currentTotalDiscountValue = parseFloat(currentTotalDiscount.slice(1, currentTotalDiscount.length));
        $(".grocery-list-total__discount-value").text("R" + ACC.groceryList.getNewTotal(container, currentTotalDiscountValue, itemUnitDiscount));
    },

    getNewTotal: function (container, currentTotal, value) {
        if (container.hasClass('js-add-product-unit')) {
            return (currentTotal + value).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        } else if (container.hasClass('js-subtract-product-unit') || container.hasClass('js-item-check')) {
            return (currentTotal - value).toFixed(2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }
        return null;
    },

    bindCreateWishlistButton: function () {
        const $button = $('.js-wishlist-create-button')
        const $input = $('.js-wishlist-create-input')

        $button.prop('disabled', !$input.val())

        $input.change(function () {
            $button.prop('disabled', !$(this).val())
        })
    },

    bannersCarousel: function () {
        const carousel = tns({
            container: ".squared-multi-banner--carousel",
            items: 1,
            loop: false,
            controls: false,
            responsive: {
                636: {
                    items: 3,
                    gutter: 46
                }
            }
        });
    },

    fullyHideHeader: function () {
        const $littleMeHeader = $(".js-grocery-list-hidden-header");
        $littleMeHeader.removeClass("half-hidden");
        $littleMeHeader.addClass("fully-hidden");
    },

    setHeaderHidden: function (setHidden) {
        if (setHidden) {
            $(".js-grocery-list-hidden-header").removeClass("fully-show");
            $(".js-grocery-list-hidden-header").addClass("fully-hidden");
        } else {
            $(".js-grocery-list-hidden-header").removeClass("fully-hidden");
            $(".js-grocery-list-hidden-header").addClass("fully-show");
        }
    },

    downloadBabyGroceryList: function () {
        const $downloadBabyWishlist = $(".js-download-grocery-list");
        $downloadBabyWishlist.on("click", function (e) {
            e.preventDefault();
            const $groceryListAccount = document.querySelector('.grocery-list-account');

            const hasHiddenHeader = $(".js-grocery-list-hidden-header").length;

            if (hasHiddenHeader) {
                ACC.groceryList.setHeaderHidden(false);
                $groceryListAccount.classList.add("download");
            }

            ACC.groceryList.printElement($groceryListAccount, 'grocery-list');
            ACC.groceryList.setIsDownloaded(true);

            if (hasHiddenHeader) {
                ACC.groceryList.setHeaderHidden(true);
                $groceryListAccount.classList.remove("download");
            }
        });
    },

    setIsDownloaded: function (status) {
        const container = $('.js-download-grocery-list')
        const downloadUrl = container.data('grocerylistDownloadUrl');
        const baseUrl = downloadUrl ? downloadUrl : 'my-grocery-list/downloaded'

        $.post({
            url: baseUrl + '?isDownloaded=' + status,
            success: function () {
                console.log("Grocery list updated");
            },
            error: function (data) {
                console.log("Error updating grocery list");
                console.log(data);
            }
        });
    },

    printElement: function ($element2print, fileName) {
        html2canvas($element2print, {}).then((canvas) => {
            var anchor = document.createElement('a');
            anchor.href = canvas.toDataURL("image/png");
            anchor.download = `${fileName}.png`;
            anchor.click();
        })
    },

    bindShareMyWishlist: function () {
        const $showShareWishlist = $(".js-show-share-wishlist");
        const $shareMyWishlist = $(".share-my-wishlist");
        const $shareWishlist = $(".js-share-grocery-list");

        if ($shareMyWishlist.length) {
            $shareMyWishlist.appendTo($("body"));
            $showShareWishlist.on("click", function () {
                $shareMyWishlist.addClass("is-show");
            });

            $shareMyWishlist.find(".share-my-wishlist__close").on("click", function () {
                $shareMyWishlist.removeClass("is-show");
            });

            $shareMyWishlist.find(".share-my-wishlist__input").on("input", function () {
                if ($(this).val() !== "") {
                    $shareWishlist.attr("disabled", false);
                } else {
                    $shareWishlist.attr("disabled", true);
                }
            });

            $shareWishlist.click(ACC.groceryList.shareMyGroceryList)
        }
    },

    shareMyGroceryList: function () {
        const form = this.closest("form#share-my-grocery-list")
        const toAddress = form.querySelector("#toAddress").value
        const $shareMyWishlist = $(".share-my-wishlist");
        const $shareWishlist = $(".js-share-grocery-list");

        $.post({
            url: form.action,
            data: JSON.stringify({
                toAddresses: (
                    toAddress
                        .split(';')
                        .map(address => address.trim())
                        .filter(address => address.length > 0)
                ),
            }),
            contentType: "application/json",
            success() {
                $shareMyWishlist.removeClass("is-show");
                $shareMyWishlist.find(".error-message").hide();
                $shareMyWishlist.find(".share-my-wishlist__input").val("");
                $shareWishlist.attr("disabled", true);

                const templateAlert = '<div class="alert-rating">' +
                    '<span class="text">' + loc("wishlist.alert.message") + '</span>' +
                    '</div>';

                const $alertWrapper = $('.little-me-account');
                $alertWrapper.append(templateAlert);

                const $alert = $(".alert-rating");
                setTimeout(function () {
                    $alert.addClass("is-hide");
                    setTimeout(function () {
                        $alert.remove();
                    }, 500);
                }, 2500);
            },
            error: function (data) {
                $shareMyWishlist.find(".error-message").show();
            }
        })
    },

    bindGroceryListBtn: function (e) {
        e.preventDefault();
        const form = $(this);
        const productExistsInGroceryList = form.data("productExistsInGroceryList");
        const url = productExistsInGroceryList ? form.data("removeUrl") : form.data("addUrl");
        const method = form.attr('method');

        $.ajax({
            type: method,
            url: url,
            data: form.serialize(),
            success: function (data) {
                if ($(data).hasClass("js-ajax-redirect")) {
                    window.location.href = $(data).data("redirectUrl");
                } else {
                    if ($(data).hasClass("groceryListAddItemResponse")) {
                        const result = $.parseJSON($(data).html());
                        ACC.groceryList.handleProductResponse(result, form);
                    }
                }
            },
            error: function () {
                console.log("Error adding product");
                console.log(data);
            }
        });
    },

}
