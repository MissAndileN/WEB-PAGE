ACC.savingsandslips = {
    _autoload: [
        ["loadDatePicker", $("#slipsAndSavingsDatepicker").length > 0]
    ],

    slips: [],

    loadAjaxSlipsAndSavings: function () {
        const carouselWrappers = $('.js-slips-component');
        carouselWrappers.each(function () {
            if (!$(this).data("initialized") === true) {
                ACC.savingsandslips.retrieveAjaxSlipsAndSavings($(this));
                $(this).data("initialized", true);
            }
        });
    },

    retrieveAjaxSlipsAndSavings: function (carouselWrapper) {
        const baseUrl = carouselWrapper.data("baseUrl");

        $.ajax({
            type: "GET",
            url: baseUrl,
            success: ACC.savingsandslips.populateAjaxComponent(carouselWrapper)
        });
    },

    retrieveAjaxSlipsDateRange: function (startDate, endDate) {
        const $componentWrapper = $('.js-slips-and-savings-content');
        if ($componentWrapper.data("initialized") === true) {
            const baseUrl = $componentWrapper.data("baseUrl");
            $(".loading-background").show();
            $.ajax({
                type: "GET",
                data: {
                    startDate: startDate,
                    endDate: endDate,
                },
                url: baseUrl,
                success: function (data) {
                    $(".loading-background").hide();
                    $componentWrapper.html(data);
                    ACC.savingsandslips.loadDataTable();
                },
                error: function (xhr) {

                }
            });
        }
    },

    populateAjaxComponent: function ($carouselWrapper) {
        return function (data) {
            const $responseContent = $(data);
            if ($responseContent.hasClass("slips-savings-banner__data")) {
                $carouselWrapper.find(".slips-savings-banner__header").after($responseContent);
            }
        }
    },

    loadAjaxLifetimeSavingsHeader: function () {
        const $componentWrappers = $('.js-savings-header-component');
        $componentWrappers.each(function () {
            var $thisComponentWrapper = $(this);
            if (!$thisComponentWrapper.data("initialized")) {
                const baseUrl = $thisComponentWrapper.data("baseUrl");
                const componentId = $thisComponentWrapper.data("componentId");
                let ajaxData = {};
                if (componentId) {
                    ajaxData = {componentId: componentId};
                }
                $.ajax({
                    type: "GET",
                    url: baseUrl,
                    data: ajaxData,
                    success: function (data) {
                        const $thisSavingsComponent = $thisComponentWrapper.closest(".js-savings-component");
                        const $responseContent = $(data);
                        const image = $responseContent.find("img");
                        if (image.length > 0) {
                            $responseContent.find("img").on('load', function () {
                                $thisSavingsComponent.replaceWith($responseContent);
                            });
                        } else {
                            $thisSavingsComponent.replaceWith($responseContent);
                        }
                    },
                    error: function () {
                        console.error("An error occurred when loading component " + componentId);
                    }
                });

                $thisComponentWrapper.data("initialized", true);
            }
        });
    },

    loadAjaxTransactions: function () {
        const $componentWrapper = $('.js-slips-and-savings-content');
        if (!$componentWrapper.data("initialized") === true) {
            const baseUrl = $componentWrapper.data("baseUrl");
            $(".loading-background").show();
            $.ajax({
                type: "GET",
                url: baseUrl,
                success: function (data) {
                    $(".loading-background").hide();
                    $componentWrapper.append(data);
                    ACC.savingsandslips.loadDataTable();
                },
                error: function () {
                    $(".loading-background").hide();
                    console.error("An error occurred when loading transactions");
                }
            });
            $componentWrapper.data("initialized", true);
        }
    },

    loadAjaxMoreTransactions: function () {
        $(document).on("click", ".js-load-more", function (e) {
            e.preventDefault();
            const baseUrl = $(this).data("baseUrl");
            const page = $(this).data("page");

            $(".loading-background").show();
            $.ajax({
                type: "GET",
                url: baseUrl,
                data: ({page: page}),
                success: function (data) {
                    const $content = $('.js-slips-and-savings-content');

                    const $oldList = $content.find(".js-slips-list");
                    const $newListItems = $(data).find(".js-slips-list .slips-and-savings__slip");

                    $oldList.append($newListItems);
                    const dataTable = $(document).find('#slipsAndSavingsTable').DataTable();
                    dataTable.rows.add($newListItems);
                    dataTable.draw();

                    const $oldMoreButton = $content.find(".js-button-load-more");
                    const $newMoreButton = $(data).closest(".js-button-load-more")
                    if ($newMoreButton.length) {
                        const $button = $newMoreButton.find(".js-load-more");
                        $oldMoreButton.html($button);
                    } else {
                        $oldMoreButton.hide();
                    }
                    $(".loading-background").hide();
                },
                error: function () {
                    ACC.savingsandslips.displaySlipModalError("An error occurred when loading transactions");
                }
            });
        });
    },

    loadSelectSlips: function () {
        $(document).on("change", ".js-slip-check", function () {
            const $this = $(this);
            const slipRequestObject = $this.data("slipReq");
            ACC.savingsandslips.addSlipReqObject(slipRequestObject);
        });
    },

    loadViewSlip: function () {
        $(document).on("click", ".js-view-slip", function (e) {
            e.preventDefault();

            const $this = $(this);
            const slipRequestObject = $this.data("slipReq");
            const url = $this.data("viewUrl");

            $(".loading-background").show();
            $.ajax({
                type: "POST",
                url: url,
                dataType: 'html',
                contentType: 'application/json',
                mimeType: 'application/json',
                data: JSON.stringify(slipRequestObject),
                success: function (data) {
                    $(".loading-background").hide();
                    const modalWidth = $(data).data("empty") && $(window).width() > 400 ? "392px" : "320px";
                    ACC.colorbox.open("", {
                        html: $(data),
                        overlayClose: false,
                        escKey: false,
                        closeButton: true,
                        className: "modal-view-slip",
                        speed: 350,
                        height: "500px",
                        innerHeight: "500px",
                        width: modalWidth
                    });
                    setTimeout(function () {
                        ACC.colorbox.resize();
                    }, 500);
                },
                error: function () {
                    $(".loading-background").hide();
                    console.error("An error occurred when loading slip");
                }
            });
        });
    },

    loadDownloadSlip: function () {
        $(document).on("click", ".js-download-slip", function (e) {
            const $this = $(this);
            const slipRequestObject = $this.data("slipReq");
            const url = $this.data("downloadUrl");

            $(".loading-background").show();
            $.ajax({
                type: "POST",
                url: url,
                dataType: 'html',
                contentType: 'application/json',
                mimeType: 'application/json',
                data: JSON.stringify(slipRequestObject),
                success: function (tillSlipData) {
                    $(".loading-background").hide();

                    const tillSlipJson = JSON.parse(tillSlipData);
                    ACC.savingsandslips.downloadFile(tillSlipJson.base64Pdf, tillSlipJson.filename);
                },
                error: function () {
                    ACC.savingsandslips.displaySlipModalError("An error occurred when loading slip");
                }
            });
        });
    },

    displaySlipModalError: function (consoleErrorMessage) {
        //TODO: delete console error and add front end error message
        $(".loading-background").hide();
        ACC.colorbox.open("", {
            html: $($(".js-slip-modal-download").html()),
            overlayClose: false,
            escKey: false,
            closeButton: true,
            className: "modal-view-slip",
            speed: 350,
            height: "500px",
            innerHeight: "500px",
            width: "320px"
        });
        setTimeout(function () {
            ACC.colorbox.resize();
        }, 500);
        console.error(consoleErrorMessage);
    },

    uncheckSelectedTillSlips: function () {
        $(".js-slip-check").prop("checked", false);
        $(".js-select-all").attr("data-select", true);
        ACC.savingsandslips.slips = [];
    },

    loadDownloadZip: function () {
        $(document).on("click", ".js-download-zip", function (e) {
            e.stopImmediatePropagation();
            const $checkedSlips = $(".js-slip-check:checked");
            if ($checkedSlips.length === 1) {
                $checkedSlips.closest('tr').find('.js-download-slip').click();
                ACC.savingsandslips.uncheckSelectedTillSlips();
            } else {
                const $this = $(this);
                const url = $this.data("downloadUrl");
                if (ACC.savingsandslips.slips && ACC.savingsandslips.slips.length > 0) {
                    $(".loading-background").show();
                    $.ajax({
                        type: "POST",
                        url: url,
                        dataType: 'html',
                        contentType: 'application/json',
                        mimeType: 'application/json',
                        data: JSON.stringify({'requests': ACC.savingsandslips.slips}),
                        success: function (tillSlipZip) {
                            $(".loading-background").hide();
                            const tillSlipJson = JSON.parse(tillSlipZip);
                            ACC.savingsandslips.downloadFile(tillSlipJson.base64Zip, tillSlipJson.filename);
                            ACC.savingsandslips.uncheckSelectedTillSlips();
                        },
                        error: function () {
                            ACC.savingsandslips.displaySlipModalError("An error occurred when loading slip");
                        }
                    });
                }
            }
        });
    },

    loadSelectAll: function () {
        $(document).on("click", ".js-select-all", function () {
            const $this = $(this),
                $slipRows = $(".js-slip-check");
            if ($this.attr("data-select") === "true") {
                $slipRows.each(function () {
                    const $this = $(this);
                    $this.prop("checked", true);
                    ACC.savingsandslips.addSlipReqObject($this.data("slipReq"));
                });
                $this.attr("data-select", !$slipRows.length);
            } else {
                $slipRows.each(function () {
                    const $this = $(this);
                    $this.prop("checked", false);

                    ACC.savingsandslips.addSlipReqObject({});
                });
                $this.attr("data-select", true);
            }
        });
    },

    loadDatePicker: function () {
        const $slipsAndSavingsDatepicker = $('#slipsAndSavingsDatepicker');
        const $slipAndSavingsDatepicker = $(".slips-and-savings__datepicker__select");
        const $body = $("body");

        const momentDefaultStartDate = moment($slipAndSavingsDatepicker.data("defaultStartDate"), "DD-MM-YYYY"),
            momentDefaultEndDate = moment(),
            defaultEndDate = new Date(),
            defaultStartDateFormatted = momentDefaultStartDate.format("D MMM ‘YY"),
            defaultEndDateFormatted = momentDefaultEndDate.format("D MMM ‘YY");
        $slipsAndSavingsDatepicker.find(".value").html("<strong>" + defaultStartDateFormatted + "</strong> " + loc("text.to") + " <strong>" + defaultEndDateFormatted + "</strong>");

        let startDate = "";
        let endDate = "";
        let hasRangeApplied = false;
        $slipsAndSavingsDatepicker.dateRangePicker({
            autoClose: false,
            format: 'D MMM ‘YY',
            singleMonth: true,
            endDate: defaultEndDate,
            customArrowPrevSymbol: '<i class=\"icon shoprite-icon-chevron-left\" aria-hidden=\"true\"></i>',
            customArrowNextSymbol: '<i class="icon shoprite-icon-chevron-right" aria-hidden="true"></i>',
            showShortcuts: true,
            customShortcuts: [
                {
                    name: 'this month',
                    dates: function () {
                        return [moment().startOf('month').toDate(), new Date()];
                    }
                }
            ],
            shortcuts: {
                'prev-days': [30, 60, 90]
            },
            setValue: function (value) {
                const dates = value.split(" to ");
                $(this).find(".value").html("<strong>" + dates[0] + "</strong> to <strong>" + dates[1] + "</strong>");
            },
            beforeShowDay: function (date) {
                let className = '';
                if (momentDefaultEndDate.isSame(date, 'day')) {
                    className = 'endDate';
                }
                return [true, className];
            },
            container: ".slips-and-savings__datepicker__select"
        }).bind('datepicker-first-date-selected', function (event, obj) {
            $slipAndSavingsDatepicker.removeClass("date-range-selected");
            $(".js-apply-datepicker").removeAttr("disabled");
            startDate = $.datepicker.formatDate('dd/mm/yy', obj.date1);
            endDate = startDate;
            const selectedStartDateFormatted = $.datepicker.formatDate("d M ‘y", obj.date1);
            $slipsAndSavingsDatepicker.find(".value").html("<strong>" + selectedStartDateFormatted + "</strong> " + loc("text.to") + " <strong>" + selectedStartDateFormatted + "</strong>");
        }).bind("datepicker-change", function (event, obj) {
            $slipAndSavingsDatepicker.addClass("date-range-selected");
            $(".js-apply-datepicker").removeAttr("disabled");
            startDate = $.datepicker.formatDate('dd/mm/yy', obj.date1);
            endDate = $.datepicker.formatDate('dd/mm/yy', obj.date2);
            $slipsAndSavingsDatepicker.data("dateRangePicker").resetMonthViewIfShortcutRangeSelected(defaultEndDate);
        }).bind('datepicker-open', function () {
            $slipAndSavingsDatepicker.addClass("is-open");
            $body.addClass("datepicker-is-open");
        }).bind('datepicker-closed', function () {
            $slipAndSavingsDatepicker.removeClass("is-open");
            $body.removeClass("datepicker-is-open");
        });

        const $datePickerWrapper = $slipAndSavingsDatepicker.find(".date-picker-wrapper");
        const templateFooterDatepicker = '<div class="footer-buttons">' +
            '<button type="button" class="button js-cancel-datepicker">' + loc("text.cancel") + '</button>' +
            '<button type="button" class="button button--apply js-apply-datepicker" disabled>' + loc("text.apply") + '</button></div>';
        $datePickerWrapper.append(templateFooterDatepicker);

        const $datePickerWrapperCaption = $datePickerWrapper.find(".caption");
        const $prevBtn = $datePickerWrapperCaption.find(".prev");
        const $nextBtn = $datePickerWrapperCaption.find(".next");
        const $datePickerBody = $datePickerWrapper.find('table tbody');

        function togglePrevNextBtns() {
            $nextBtn.toggleClass('disabled', $datePickerBody.find('tr:last-child td:last-child .day').is('.invalid, .endDate'));
        }

        $datePickerWrapperCaption.find(".prev, .next").on('click', function () {
            togglePrevNextBtns();
        });

        $(".js-cancel-datepicker").on("click", function () {
            const slipsAndSavingsDatepicker = $slipsAndSavingsDatepicker.data("dateRangePicker");
            slipsAndSavingsDatepicker.close();
            slipsAndSavingsDatepicker.clear();
            $slipsAndSavingsDatepicker.find(".value").html("<strong>" + defaultStartDateFormatted + "</strong> " + loc("text.to") + " <strong>" + defaultEndDateFormatted + "</strong>");
            $shortcuts.removeClass("is-selected");
            $(".js-apply-datepicker").attr("disabled", true);
            slipsAndSavingsDatepicker.resetMonthsView(defaultEndDate);
            togglePrevNextBtns();
            if (hasRangeApplied) {
                startDate = "";
                endDate = "";
                ACC.savingsandslips.retrieveAjaxSlipsDateRange(startDate, endDate);
                hasRangeApplied = false;
                ACC.savingsandslips.uncheckSelectedTillSlips();
            }
        });

        $(".js-apply-datepicker").on("click", function () {
            $slipsAndSavingsDatepicker.data("dateRangePicker").close();
            ACC.savingsandslips.retrieveAjaxSlipsDateRange(startDate, endDate);
            hasRangeApplied = true;
            ACC.savingsandslips.uncheckSelectedTillSlips();
        });

        $slipsAndSavingsDatepicker.find(".icon-dropdown").on("click", function () {
            $slipsAndSavingsDatepicker.data("dateRangePicker").close();
        });

        const $datePickerWrapperFooter = $datePickerWrapper.find(".footer");
        const $shortcuts = $datePickerWrapperFooter.find("a");
        const templateShortcutsDatepicker = '<div class="shortcuts-buttons"></div>';
        $datePickerWrapper.append(templateShortcutsDatepicker);
        $shortcuts.appendTo(".shortcuts-buttons");
        $shortcuts.on("click", function () {
            $shortcuts.removeClass("is-selected");
            $(this).addClass("is-selected");
            togglePrevNextBtns();
        });

        const $datePickerWrapperWeekname = $datePickerWrapper.find(".week-name");
        $.each($datePickerWrapperWeekname.find("th"), function (index, element) {
            $(element).html($(element).text().substr(0, 1));
        });
        $slipsAndSavingsDatepicker.data("dateRangePicker").resetMonthsView(defaultEndDate);
        togglePrevNextBtns();
    },

    downloadFile: function (base64String, name) {
        const downloadLink = document.createElement('a');
        document.body.appendChild(downloadLink);
        downloadLink.href = "data:application/pdf;base64," + base64String;
        downloadLink.target = '_self';
        downloadLink.download = name;
        downloadLink.click();
    },

    addSlipReqObject: function (slipReqObject) {
        const found = ACC.savingsandslips.findElement(ACC.savingsandslips.slips,
            slipReqObject);

        if (!found) {
            ACC.savingsandslips.slips.push(slipReqObject);
        } else {
            const index = ACC.savingsandslips.slips.indexOf(found);
            ACC.savingsandslips.slips.splice(index, 1);
        }
    },

    findElement: function (list, elementToFind) {
        return list.find(function (element) {
            const found = element.tranId === elementToFind.tranId
                && element.storeId === elementToFind.storeId
                && element.posDateTime === elementToFind.posDateTime
                && element.posId === elementToFind.posId
                && element.startDateTime === elementToFind.startDateTime;

            return found;
        });
    },

    loadDataTable: function () {
        const $slipsAndSavingsTable = $('#slipsAndSavingsTable');
        $slipsAndSavingsTable.DataTable({
            "searching": false,
            "paging": false,
            "info": false,
            "language": {
                "emptyTable": "",
                "zeroRecords": ""
            }
        });

        const $slips = $(".slips-and-savings__slip");
        $slipsAndSavingsTable.find(".slips-and-savings__slip[data-latest=true] .data-check").append('<span class="latest">' + loc("text.latest") + '</span>');
        enquire.register("screen and (max-width:" + ACC.common.encodeHtml(screenXsMax) + ")", {
            match: function () {
                $.each($slips, function (index, element) {
                    const $slip = $(element);
                    const $dataDate = $slip.find(".data-date");
                    const $storeName = $slip.find(".store-name");
                    $storeName.appendTo($dataDate);
                });
            },
            unmatch: function () {
                $.each($slips, function (index, element) {
                    const $slip = $(element);
                    const $dataStore = $slip.find(".data-store");
                    const $storeName = $slip.find(".store-name");
                    $storeName.appendTo($dataStore);
                });
            }
        });
    }

};

$(function () {
    if ($('.js-slips-component').length) {
        if (ACC.common.isSmartEditEnabled() && ACC.common.isReprocessPageEnabled()) {
            window.smartedit.addOnReprocessPageListener(ACC.savingsandslips.loadAjaxSlipsAndSavings);
            window.smartedit.reprocessPage();
        } else {
            ACC.savingsandslips.loadAjaxSlipsAndSavings();
        }
    }

    if ($('.js-savings-header-component').length) {
        if (ACC.common.isSmartEditEnabled() && ACC.common.isReprocessPageEnabled()) {
            window.smartedit.addOnReprocessPageListener(ACC.savingsandslips.loadAjaxLifetimeSavingsHeader);
            window.smartedit.reprocessPage();
        } else {
            ACC.savingsandslips.loadAjaxLifetimeSavingsHeader();
        }
    }

    if ($('.js-slips-and-savings-content').length) {
        if (ACC.common.isSmartEditEnabled() && ACC.common.isReprocessPageEnabled()) {
            window.smartedit.addOnReprocessPageListener(ACC.savingsandslips.loadAjaxTransactions);
            window.smartedit.addOnReprocessPageListener(ACC.savingsandslips.loadAjaxMoreTransactions);
            window.smartedit.addOnReprocessPageListener(ACC.savingsandslips.loadSelectSlips);
            window.smartedit.addOnReprocessPageListener(ACC.savingsandslips.loadViewSlip);
            window.smartedit.addOnReprocessPageListener(ACC.savingsandslips.loadDownloadSlip);
            window.smartedit.addOnReprocessPageListener(ACC.savingsandslips.loadDownloadZip);
            window.smartedit.addOnReprocessPageListener(ACC.savingsandslips.loadSelectAll);
            window.smartedit.reprocessPage();
        } else {
            ACC.savingsandslips.loadAjaxTransactions();
            ACC.savingsandslips.loadAjaxMoreTransactions();
            ACC.savingsandslips.loadSelectSlips();
            ACC.savingsandslips.loadViewSlip();
            ACC.savingsandslips.loadDownloadSlip();
            ACC.savingsandslips.loadDownloadZip();
            ACC.savingsandslips.loadSelectAll();
        }
    }

});
