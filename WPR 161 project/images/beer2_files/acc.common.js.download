ACC.common = {

    currentCurrency: $("main").data('currencyIsoCode') || "USD",

    /*blockFormAndShowProcessingMessage: function (submitButton) {
        const form = submitButton.parents('form:first');
        const processingImage = $("<img>").attr("src", ACC.config.commonResourcePath + "/images/spinner.gif");
        form.block({message: processingMessage});
    },*/

    refreshScreenReaderBuffer: function () {
        // changes a value in a hidden form field in order
        // to trigger a buffer update in a screen reader
        $('#accesibility_refreshScreenReaderBufferField').attr('value', new Date().getTime());
    },

    checkAuthenticationStatusBeforeAction: function (actionCallback) {
        $.ajax({
            url: ACC.config.authenticationStatusUrl,
            statusCode: {
                401: function () {
                    location.href = ACC.config.loginUrl;
                }
            },
            dataType: 'json',
            success: function (data) {
                if (data === "authenticated") {
                    actionCallback();
                }
            }
        });
    },

    encodeHtml: function (rawText) {
        return rawText.toString()
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/\//g, '&#47;');
    },

    isSmartEditEnabled: function () {
        return window.parent.location.pathname === "/smartedit/";
    },

    isReprocessPageEnabled: function () {
        return typeof window.smartedit != 'undefined' && typeof window.smartedit.addOnReprocessPageListener === "function";
    },

    bonusBuyHeightItemProduct: function () {
        const $jsOwlCarousel = $(".js-owl-carousel");
        $.each($jsOwlCarousel, function (index, carousel) {
            const $carousel = $(carousel);
            const $itemsProduct = $carousel.find(".item-product");
            const lengthItemsProduct = $itemsProduct.length;

            if (lengthItemsProduct) {
                normalizeButtonHeight($itemsProduct, lengthItemsProduct);
            }
        });

        const $productGrid = $(".product__grid");
        $.each($productGrid, function (index, grid) {
            const $grid = $(grid);
            const $itemsProduct = $grid.find(".item-product");
            const lengthItemsProduct = $itemsProduct.length;

            if (lengthItemsProduct) {
                normalizeButtonHeight($itemsProduct, 5);
                enquire
                    .register("screen and (max-width:" + ACC.common.encodeHtml(screenMdMax) + ")", function () {
                        normalizeButtonHeight($itemsProduct, 4);
                    })
                    .register("screen and (max-width:" + ACC.common.encodeHtml(screenSmMax) + ")", function () {
                        normalizeButtonHeight($itemsProduct, 3);
                    })
                    .register("screen and (max-width:" + ACC.common.encodeHtml(screenXsMax) + ")", function () {
                        normalizeButtonHeight($itemsProduct, 2);
                    });
            }
        });

        function normalizeButtonHeight(itemsProducts, itemsByRow) {
            const $itemsProduct = itemsProducts;
            $itemsProduct.find(".item-product__message").css("min-height", "auto");
            const totalItemsProduct = $itemsProduct.length;
            let itemPosition = 1;
            let maxHeight = 0;
            let arrItemsProduct = [];
            let countItemsProduct = 1;

            $.each($itemsProduct, function (index, element) {
                if (itemPosition <= itemsByRow) {
                    const $itemProduct = $(element);
                    arrItemsProduct.push($itemProduct);
                    const $itemProductMessage = $itemProduct.find(".item-product__message");
                    const itemProductMessageHeight = $itemProductMessage.outerHeight();

                    if ($itemProductMessage.length) {
                        if (itemProductMessageHeight > maxHeight) maxHeight = itemProductMessageHeight
                    }

                    if (itemPosition === itemsByRow || countItemsProduct === totalItemsProduct) {
                        $.each(arrItemsProduct, function (index, element) {
                            element.find(".item-product__message").css("min-height", maxHeight + "px");
                        });
                        itemPosition = 1;
                        maxHeight = 0;
                        arrItemsProduct = [];
                    } else {
                        itemPosition++;
                    }
                }
                countItemsProduct++;
            });
        }
    }

};

/* Extend jquery with a postJSON method */
jQuery.extend({
    postJSON: function (url, data, callback) {
        return jQuery.post(url, data, callback, "json");
    }
});

// add a CSRF request token to POST ajax request if its not available
$.ajaxPrefilter(function (options, originalOptions, jqXHR) {
    // Modify options, control originalOptions, store jqXHR, etc
    if (options.type === "post" || options.type === "POST") {
        if (typeof options.data === "undefined") {
            options.data = "CSRFToken=" + ACC.config.CSRFToken;
        } else {
            if (options.data instanceof window.FormData) {
                options.data.append("CSRFToken", ACC.config.CSRFToken);
            }
            // if its a json post, then append CSRF to the header.
            else if (/application\/json/i.test(options.contentType)) {
                jqXHR.setRequestHeader('CSRFToken', ACC.config.CSRFToken);
            } else if (options.data.indexOf("CSRFToken") === -1) {
                options.data = options.data + "&" + "CSRFToken=" + ACC.config.CSRFToken;
            }
        }
    }
});
